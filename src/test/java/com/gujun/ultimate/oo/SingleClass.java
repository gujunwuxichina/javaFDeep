package com.gujun.ultimate.oo;

/**
 * @ClassName: SingleClass
 * @Author GuJun
 * @Description:    单例类
 * @Date 2021年06月30日 10:41
 */
public class SingleClass {

    //  https://www.cnblogs.com/zhaoyan001/p/6365064.html
    //  某些时候，不允许随意创建类的对象；
    //  若某个类始终只能创建一个实例，则为单例类；
    //  private修饰构造器，并提供一个public static 修饰的方法用来获取实例；
    //  还必须把已创建的对象缓存起来，保存对象的引用变量static修饰；

    //  单例模式在多线程下注意：
    //  若唯一的实例尚未被创建，有两个线程通过调用创建方法，若同时被检测到都还没有创建实例，就会同时各自创建一个实例，就不是单例了；

    //  几种写法：

    //  1.饿汉模式：在类加载时就完成实例化,即将用来缓存实例的静态成员变量初始为实例，可以在声明时或用静态代码块，其实都一样的；
    //  可以避免多线程问题，但从始至终都使用该实例，会造成内存浪费；？

    //  2.懒汉模式：不在类初始阶段创建实例，而是在获取实例的静态方法里通过判断来创建；
    //  在多线程下不安全；

}
