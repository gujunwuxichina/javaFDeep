package com.gujun.ultimate.oo;

/**
 * @ClassName: Test01
 * @Author GuJun
 * @Description:
 * @Date 2021年06月28日 17:36
 */
public class Test01 {

    /*
     *  为什么有栈内存和堆内存：
     */
    //  当一个方法执行时，每个方法都会建立自己的内存栈；在该方法内定义的变量将会逐个放入该栈内存里，随着方法的执行结束，该栈内存将自然销毁；
    //  所以方法中定义的局部变量都是放在栈内存中的；
    //  在程序创建一个对象时，该对象被保存在运行时数据区，以便反复使用，该运行时数据区就是堆内存；堆内存中的对象不会随方法的结束而销毁，只有
    //  当对象没有任何变量引用它时，垃圾回收机制才会在合适的时候回收；

    //  成员变量和局部变量

    //  成员变量分为类变量和实例变量：
    //  1.类变量从类的准备阶段起开始存在，直到系统完全销毁该类；
    //  2.实例变量从该实例创建起开始存在，直到销毁该实例；
    //  成员变量无须显示初始化，只要为一个类定义类变量或实例变量，系统就会在该类准备阶段或实例创建时进行默认初始化；

    //  局部变量，可以分为：形参、方法局部变量、代码块局部变量；
    //  与成员不同的是，局部变量除了形参之外，都必须显示初始化；其实形参的初始化在该方法被调用时由系统完成，即由调用者负责；

    //  成员变量的初始化和内存中的运行机制
    //  当系统加载类或创建该类的实例时，系统自动为成员变量分配内存，并在分配内存后，自动为成员变量指定初始值；
    //  局部变量的初始化和内存中的运行机制
    //  局部变量定义后必须显示初始化才能使用；系统并不会为局部变量执行初始化，即意味着定义局部变量后，系统并未为这个变量分配内存空间，直到程序为该
    //  局部变量赋值时，系统才会分配内存；局部变量的无须系统垃圾回收，在方法或代码块执行完而结束；


}
