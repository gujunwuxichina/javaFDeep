package com.gujun.ultimate.oo;

import org.junit.Test;

/**
 * @ClassName: Test02
 * @Author GuJun
 * @Description:
 * @Date 2021年06月28日 22:47
 */
public class Test02 {

    //  隐藏和封装
    //  访问控制符：
    //  private 同一类中
    //  default(默认)    同包下
    //  protected 同包下或不同包的子类
    //  public  公共访问，被所有类访问

    //  构造器 H
    class User{
        private String name;
        public User(String name) {
            System.out.println(this.name);  //  null
            this.name = name;
        }
    }
    @Test
    public void test01(){
        User user=new User("gujun");
    }


    //  类的继承
    //  如果父类的方法修饰符是private,则子类无法访问父类中的该方法，也就无法重写；

    //  多态
    //  引用变量有两个类型，一个编译时类型，一个是运行时类型；编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定；
    //  当编译时类型和运行时类型不一致时，就出现多态；
    //  子类是特殊的父类，允许把一个子类对象直接赋给一个父类引用变量，无须任何类型转换；
    //  引用变量在编译阶段只能调用编译时类型所具有的方法，运行时执行它运行时类型所具有的方法；
    //  通过引用类型访问其包含的成员变量时，总是其编译时类型的成员变量，而不是运行时类型的；

    //  继承和组合
    //  继承是复用的重要手段，但继承有一个缺点：破坏封装；组合则没有；
    //  继承的注意点：
    //  父类中方法需要被外部调用，且又不希望被子类重写，可以用public final修饰
    //  组合实现复用：
    //  如果需要复用一个类，除了可以把该类当作父类外，还可以将该类当成另一个类的组成成分；
    //  继承：is-a;组合：has-a;

    //  初始化块
    //  初始化块在构造器之前执行；
    //  普通初始化块、声明实例变量指定的默认值都可以认为是对象的初始化块；
    //  静态初始化块
    //  普通初始化块负责对对象执行初始化，静态初始化块负责对类进行初始化；
    //  静态初始化块是类相关的，系统将在类初始化阶段执行静态初始化块，而不是在创建对象时；
    //  静态初始化块和声明静态成员变量时所指定的初始值都是该类的类初始化代码；

}
