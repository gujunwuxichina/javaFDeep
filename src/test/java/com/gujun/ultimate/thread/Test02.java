package com.gujun.ultimate.thread;

/**
 * @ClassName: Test02
 * @Author GuJun
 * @Description:
 * @Date 2021年08月11日 10:50
 */
public class Test02 {

    //  控制线程

    //  join
    //  让一个线程等待另一个线程完成的方法；
    //  当某个程序中调用了其它线程的join(),当前线程被阻塞，直到被join的其它线程执行完毕为止；

    //  后台线程
    //  如JVM垃圾回收器
    //  所有前台都结束后，后台线程就会自动死亡；

    //  sleep
    //  让线程暂停一段时间，进入阻塞状态；
    //  当线程执行sleep()后，即使没有其它可执行的线程，该线程也不会被执行；

    //  yield线程让步
    //  也可以让当前线程暂停，类似于sleep,但不会阻塞线程，只是进入就绪状态；
    //  即让线程调度器重新调度一下，有可能又重新执行；优先级高的才会执行；

    //  改变线程优先级
    //  H

}
