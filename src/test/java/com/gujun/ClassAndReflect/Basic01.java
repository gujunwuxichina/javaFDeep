package com.gujun.ClassAndReflect;

/**
 * @ClassName gu
 * @Description TODO
 * @Author GuJun
 * @Date 2019/8/4 22:30
 * @Version 1.0
 **/
public class Basic01 {

    //系统可能在第一次使用某个类时加载该类，也可能采用预加载机制来加载某个类；
    //类的加载：
        //当程序主动使用某个类时，若该类还未被加载到内存中，则系统会通过加载，连接，初始化三个步骤对该类
        //进行初始化；这三个步骤统称为类加载或类初始化；
        //类的加载指的是将类的class文件读入内存，并创建一个Class对象，即程序中使用任何类时，都会为之创建一个Class对象；
    //类的加载由类加载器完成，类加载由JVM提供，JVM提供的为系统类加载器，也可以通过继承ClassLoader来创建自己的类加载器；
    //通过使用不同的类加载器，可以从不同的来源来加载类的二进制数据：
        //1.从本地系统加载class文件；
        //2.从JAR包加载class文件；
        //3.通过网络加载class文件；
        //4.把一个Java源文件动态编译，并执行加载；
    //类加载无须等到首次使用才加载，JVM允许系统预先加载某些类；

    //类的连接：
        //类加载以后，系统为之生成一个Class对象；
        //接着进入连接阶段，该阶段负责把类的二进制数据合并到JRE中；分为三个阶段：
        //1.验证：用于检验被加载的类是否有正确的内部结构，并和其它类协调一致；
        //2.准备：负责为类的类变量分配内存，并设置默认初始值；
        //3.解析：将类的二进制数据中的符号引用替换成直接引用；

    //类的初始化：
        //JVM负责对类进行初始化，主要就是对类变量进行初始化；
        //Java中对类变量指定初始值两种方式：声明时就指定，在静态代码块中指定；


    //类的初始化时机：
    //1.创建类的实例，包括new、反射、反序列化创建实例；
    //2.调用类方法；
    //3.访问类或接口的类变量；
    //4.使用反射来强制创建某个类或接口的Class对象；
    //5.初始化某个类的子类；
    //6.直接使用Java.exe命令运行某个类；
    //tip:对于一个final修饰的类变量，若在编译阶段就确认下来，则是宏变量；Java编译器h会在编译时直接把该类变量出现的地方替换成直接值；
    //此时访问类变量不会导致该类初始化；

    //使用ClassLoad类的loadClass()加载某个类时，该方法只是加载类，并不会执行该类的初始化；Class的forName()才会强制初始化该类；


}
